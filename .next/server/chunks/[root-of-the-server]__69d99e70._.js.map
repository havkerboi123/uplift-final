{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///D:/uplift-demo/demo/app/api/report/save/route.ts"],"sourcesContent":["// Save analysis to Google Sheets using a service account JSON file in project root\r\n// Requires env: GOOGLE_SHEETS_SPREADSHEET_ID and GOOGLE_SERVICE_ACCOUNT_PATH (relative to repo root)\r\n\r\nexport const runtime = 'nodejs';\r\nexport const revalidate = 0;\r\n\r\ntype SaveBody = {\r\n  id: string;\r\n  data: {\r\n    type: string;\r\n    levels: Array<{\r\n      name: string;\r\n      value: string;\r\n      reference_range?: string | null;\r\n      what_it_is: string;\r\n      your_level_means: string;\r\n      why_it_matters: string;\r\n      possible_causes?: string | null;\r\n    }>;\r\n    concerns: string[];\r\n  };\r\n};\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = (await req.json()) as SaveBody;\r\n    if (!body?.id || !body?.data) {\r\n      return new Response(JSON.stringify({ ok: false, error: 'Invalid payload' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n\r\n    const spreadsheetId = (globalThis as any).process?.env?.GOOGLE_SHEETS_SPREADSHEET_ID as\r\n      | string\r\n      | undefined;\r\n    const credsPath = (globalThis as any).process?.env?.GOOGLE_SERVICE_ACCOUNT_PATH as\r\n      | string\r\n      | undefined;\r\n\r\n    if (!spreadsheetId || !credsPath) {\r\n      return new Response(JSON.stringify({ ok: false, error: 'Google Sheets not configured' }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n\r\n    // Dynamically import googleapis to keep cold starts lighter\r\n    const { google } = await import('googleapis');\r\n    const fs = await import('node:fs/promises');\r\n    const path = await import('node:path');\r\n\r\n    const projectRoot = process.cwd();\r\n    // Try provided path relative to project root; if not found, try demo/..\r\n    let absoluteCreds = path.resolve(projectRoot, credsPath);\r\n    try {\r\n      await fs.stat(absoluteCreds);\r\n    } catch {\r\n      absoluteCreds = path.resolve(projectRoot, '..', credsPath);\r\n    }\r\n    const raw = await fs.readFile(absoluteCreds, 'utf-8');\r\n    const creds = JSON.parse(raw);\r\n\r\n    const jwt = new google.auth.JWT({\r\n      email: creds.client_email,\r\n      key: creds.private_key,\r\n      scopes: ['https://www.googleapis.com/auth/spreadsheets'],\r\n    });\r\n    const sheets = google.sheets({ version: 'v4', auth: jwt });\r\n\r\n    const timestamp = new Date().toISOString();\r\n    const concernsSummary = (body.data.concerns ?? []).join(' | ') || 'None';\r\n    const parameterNames = body.data.levels.map((l) => l.name).join(', ');\r\n    const values = body.data.levels.map((l) => l.value).join(', ');\r\n    const referenceRanges = body.data.levels\r\n      .map((l) => (l.reference_range ?? 'N/A'))\r\n      .join(', ');\r\n    const whatItIsAll = body.data.levels.map((l) => `${l.name}: ${l.what_it_is}`).join(' || ');\r\n    const yourLevelMeansAll = body.data.levels\r\n      .map((l) => `${l.name}: ${l.your_level_means}`)\r\n      .join(' || ');\r\n    const whyItMattersAll = body.data.levels\r\n      .map((l) => `${l.name}: ${l.why_it_matters}`)\r\n      .join(' || ');\r\n    const possibleCausesAll = body.data.levels\r\n      .map((l) => `${l.name}: ${l.possible_causes ?? 'N/A'}`)\r\n      .join(' || ');\r\n\r\n    // Ensure header row exists in A1:K1\r\n    await sheets.spreadsheets.values.batchUpdate({\r\n      spreadsheetId,\r\n      requestBody: {\r\n        valueInputOption: 'RAW',\r\n        data: [\r\n          {\r\n            range: 'Sheet1!A1:K1',\r\n            values: [\r\n              [\r\n                'id',\r\n                'timestamp',\r\n                'test_type',\r\n                'parameter_name',\r\n                'value',\r\n                'reference_range',\r\n                'what_it_is',\r\n                'your_level_means',\r\n                'why_it_matters',\r\n                'possible_causes',\r\n                'concerns_summary',\r\n              ],\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    });\r\n\r\n    // Append row\r\n    await sheets.spreadsheets.values.append({\r\n      spreadsheetId,\r\n      range: 'Sheet1!A:K',\r\n      valueInputOption: 'RAW',\r\n      requestBody: {\r\n        values: [\r\n          [\r\n            body.id,\r\n            timestamp,\r\n            body.data.type,\r\n            parameterNames,\r\n            values,\r\n            referenceRanges,\r\n            whatItIsAll,\r\n            yourLevelMeansAll,\r\n            whyItMattersAll,\r\n            possibleCausesAll,\r\n            concernsSummary,\r\n          ],\r\n        ],\r\n      },\r\n    });\r\n\r\n    return new Response(JSON.stringify({ ok: true }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } catch (e: any) {\r\n    return new Response(JSON.stringify({ ok: false, error: e?.message ?? 'unknown' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}