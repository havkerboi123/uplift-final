{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///D:/uplift-demo/demo/app/api/analyze/route.ts"],"sourcesContent":["// Use standard Web APIs to avoid Node/Next type dependencies\r\n\r\nexport const runtime = 'nodejs';\r\nexport const revalidate = 0;\r\n\r\ntype TestLevel = {\r\n  name: string;\r\n  value: string;\r\n  reference_range?: string | null;\r\n  what_it_is: string;\r\n  your_level_means: string;\r\n  why_it_matters: string;\r\n  possible_causes?: string | null;\r\n};\r\n\r\ntype AnalysisData = {\r\n  type: string;\r\n  levels: TestLevel[];\r\n  concerns: string[];\r\n};\r\n\r\nfunction generateTwoDigitId(): string {\r\n  return String(Math.floor(Math.random() * 90) + 10); // 10..99\r\n}\r\n\r\nfunction arrayBufferToBase64(ab: ArrayBuffer): string {\r\n  const bytes = new Uint8Array(ab);\r\n  let binary = '';\r\n  for (let i = 0; i < bytes.length; i++) binary += String.fromCharCode(bytes[i]);\r\n  return btoa(binary);\r\n}\r\n\r\nasync function fileToDataUrl(file: File): Promise<string> {\r\n  const base64 = arrayBufferToBase64(await file.arrayBuffer());\r\n  const mime = file.type || 'image/png';\r\n  return `data:${mime};base64,${base64}`;\r\n}\r\n\r\nconst SIMPLE_MEDICAL_PROMPT = `You are a medical report analyzer that helps patients understand their test results in simple language.\r\n\r\nReturn STRICT JSON with keys: type (string), levels (array of {name, value, reference_range, what_it_is, your_level_means, why_it_matters, possible_causes}), concerns (array of strings).\r\nNo extra text. If unknown, use null or empty arrays.\r\n`;\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const form = await req.formData();\r\n    const file = form.get('image');\r\n\r\n    if (!(file instanceof File)) {\r\n      return new Response(\r\n        JSON.stringify({ success: false, error: 'No image file provided', message: 'Upload a PNG with key \"image\"' }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n\r\n    const filename = (file as File).name || 'upload.png';\r\n    const lower = filename.toLowerCase();\r\n    if (!lower.endsWith('.png')) {\r\n      return new Response(\r\n        JSON.stringify({ success: false, error: 'Invalid file format', message: 'Only .png is accepted' }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n\r\n    const imageDataUri = await fileToDataUrl(file);\r\n\r\n    const apiKey = (globalThis as any).process?.env?.OPENAI_API_KEY as string | undefined;\r\n    if (!apiKey) {\r\n      return new Response(\r\n        JSON.stringify({ success: false, error: 'Server misconfigured', message: 'OPENAI_API_KEY not set' }),\r\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n\r\n    // Call OpenAI Chat Completions to get structured JSON back\r\n    const chatBody = {\r\n      model: 'gpt-4o-2024-08-06',\r\n      temperature: 0.3,\r\n      messages: [\r\n        { role: 'system', content: SIMPLE_MEDICAL_PROMPT },\r\n        {\r\n          role: 'user',\r\n          content: [\r\n            { type: 'text', text: 'Analyze this medical report and return strict JSON.' },\r\n            { type: 'image_url', image_url: { url: imageDataUri } },\r\n          ],\r\n        },\r\n      ],\r\n      response_format: {\r\n        type: 'json_schema',\r\n        json_schema: {\r\n          name: 'medical_report_analysis',\r\n          schema: {\r\n            type: 'object',\r\n            additionalProperties: false,\r\n            properties: {\r\n              type: { type: 'string' },\r\n              levels: {\r\n                type: 'array',\r\n                items: {\r\n                  type: 'object',\r\n                  additionalProperties: false,\r\n                  properties: {\r\n                    name: { type: 'string' },\r\n                    value: { type: 'string' },\r\n                    reference_range: { type: ['string', 'null'] },\r\n                    what_it_is: { type: 'string' },\r\n                    your_level_means: { type: 'string' },\r\n                    why_it_matters: { type: 'string' },\r\n                    possible_causes: { type: ['string', 'null'] },\r\n                  },\r\n                  required: [\r\n                    'name',\r\n                    'value',\r\n                    'reference_range',\r\n                    'what_it_is',\r\n                    'your_level_means',\r\n                    'why_it_matters',\r\n                    'possible_causes',\r\n                  ],\r\n                },\r\n              },\r\n              concerns: { type: 'array', items: { type: 'string' } },\r\n            },\r\n            required: ['type', 'levels', 'concerns'],\r\n          },\r\n          strict: true,\r\n        },\r\n      },\r\n    } as const;\r\n\r\n    const resp = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n      body: JSON.stringify(chatBody),\r\n    });\r\n\r\n    if (!resp.ok) {\r\n      const text = await resp.text();\r\n      return new Response(\r\n        JSON.stringify({ success: false, error: 'OpenAI request failed', message: text }),\r\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n\r\n    const json = (await resp.json()) as any;\r\n    const content = json?.choices?.[0]?.message?.content;\r\n    let data: AnalysisData | null = null;\r\n    try {\r\n      data = typeof content === 'string' ? (JSON.parse(content) as AnalysisData) : null;\r\n    } catch {\r\n      // fallback: try to coerce\r\n      data = null;\r\n    }\r\n\r\n    if (!data) {\r\n      return new Response(\r\n        JSON.stringify({ success: false, error: 'Parsing error', message: 'Failed to parse analysis JSON' }),\r\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n    }\r\n\r\n    const id = generateTwoDigitId();\r\n    // Save to Google Sheets (best-effort)\r\n    try {\r\n      const sheetResp = await fetch(`${new URL(req.url).origin}/api/report/save`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id, data }),\r\n      });\r\n      // ignore failures; continue returning analysis\r\n      await sheetResp.text().catch(() => {});\r\n    } catch {}\r\n\r\n    return new Response(\r\n      JSON.stringify({ success: true, id, timestamp: new Date().toISOString(), data }),\r\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n  } catch (err: any) {\r\n    return new Response(\r\n      JSON.stringify({ success: false, error: 'Analysis failed', message: err?.message ?? 'Unknown error' }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}